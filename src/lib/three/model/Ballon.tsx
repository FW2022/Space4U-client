/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
    nodes: {
        Balloon: THREE.Mesh;
    };
    materials: {
        Ballon_co: THREE.MeshStandardMaterial;
    };
};

export function Ballon({ ...props }: JSX.IntrinsicElements["group"]) {
    const group = useRef<THREE.Group>();
    const { nodes, materials } = useGLTF("/models/ballon.glb") as GLTFResult;

    useEffect(() => {
        group.current.position.set(
            -20 + Math.random() * 40,
            -20 + Math.random() * 40,
            -2 + Math.random() * 4
        );
    }, []);

    useFrame(({ clock }, delta) => {
        // group.current.position.x = Math.sin(clock.getElapsedTime() / 10);
        group.current.position.y += delta * 5;

        if (group.current.position.y > 20) {
            group.current.position.y = -20;
        }
    });

    return (
        <group ref={group} {...props} dispose={null}>
            <group rotation={[Math.PI / 2, 0, 0]}>
                <mesh
                    geometry={nodes.Balloon.geometry}
                    material={materials.Ballon_co}
                />
            </group>
        </group>
    );
}

useGLTF.preload("/models/ballon.glb");
